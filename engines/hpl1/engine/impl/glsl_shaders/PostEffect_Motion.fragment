// Copyright 2006-2010 (C) - Frictional Games
//
// This file is part of HPL1 Engine
//
// For conditions of distribution and use, see copyright notice in LICENSE-shaders
//

///////////////////////////////////////////////////////
// MOTION BLUR FRAGMENT PROGRAM 
// Credits to jonathan for optimization
///////////////////////////////////////////////////////

in vec4 vPos; //in projection space
in vec4 vVtxPos;
in vec4 vPrevVtxPos;

OUTPUT

uniform sampler2DRect screenTex = 0;
uniform vec2 halfScreenSize;

void main()
{
	vec2 wpos = vPos.xy;
	vec2 p1 = vVtxPos.xy / vVtxPos.w;
	vec2 p2 = vPrevVtxPos.xy / vPrevVtxPos.w;

	vec2 velocity = (p2 - p1) * halfScreenSize;

	//Sample into scene texture along motion vector
	const float samples = min( max( 1.0, ceil( max( abs( velocity.x ), abs( velocity.y ) ) / 2.0 ) ), 16.0 );
	const float w = 1.0 / samples;  // weight
	const vec2 s = velocity / samples; // step
	vec4 a = vec4(0.0);

	for(float i=0.0; i<samples; i+=1.0)
	{
		a += texture2DRect(screenTex, wpos) * w;
		wpos += s;
	}

	outColor = a;
	//outColor.xy = 0.5 + velocity *0.005;
	//outColor.z = 1;

	//outColor.xyz = (1 + velocity) *0.5;

	//outColor = texture2DRect(screenTex, wpos + velocity);
}
