// Copyright 2006-2010 (C) - Frictional Games
//
// This file is part of HPL1 Engine
//
// For conditions of distribution and use, see copyright notice in LICENSE-shaders
//

///////////////////////////////////////////////////////
/// REFRACTION SPECIAL FRAGMENT PROGRAM /////////////////
///////////////////////////////////////////////////////

in vec4 vPos; //in projection space
in vec2 vUv; //in object space
in vec4 vColor;

OUTPUT

uniform sampler2DRect screenMap = 0;
uniform sampler2D refractMap = 1;
uniform sampler2D alphaMap = 2;

uniform vec2 screenSize;
uniform float t;
uniform float scale

void main()
{
	float alpha = texture(alphaMap, vUv).x;
	vec2 uv2 = (vPos.xy / screenSize);
	uv2.x += sin(t + uv2.y*10) * 0.001 * scale;
	uv2.y += sin(t + uv2.x*10) * 0.001 * scale;
	vec3 offset = ((texture(refractMap, uv2)*2.0) - vec3(1.0)) * alpha * vColor.w;

	outColor.xyz = texture2DRect(screenMap,vPos.xy - offset.xy*scale);
}
