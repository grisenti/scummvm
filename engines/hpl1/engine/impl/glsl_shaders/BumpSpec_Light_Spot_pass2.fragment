// Copyright 2006-2010 (C) - Frictional Games
//
// This file is part of HPL1 Engine
//
// For conditions of distribution and use, see copyright notice in LICENSE-shaders
//

///////////////////////////////////////////////////////
/// DIFFUSE SPOTLIGHTING FRAGMENT PROGRAM /////////////
///////////////////////////////////////////////////////

in vec4 vPos; //in projection space
in vec4 vLightColor;
in vec2 vUv;
in vec3 vLightDir;
in vec3 vHalfVec;
in vec3 vSpotlightUv;

OUTPUT

uniform sampler2D diffuseMap = 0;
uniform sampler2D normalMap = 1;
uniform samplerCube normalCubeMap = 2;
uniform sampler2D  spotlightMap = 3;

void main()
{
	vec3 diffuse = texture(diffuseMap, vUv).xyz;

	vec4 bumpVec = texture(normalMap, vUv);
	bumpVec.xyz = (2.0*bumpVec.xyz)-vec3(1.0);

	vec3 lightVec = (2.0*textureCube(normalCubeMap,vLightDir)-vec3(1.0)).xyz;
	vHalfVec = (2.0*textureCube(normalCubeMap,vHalfVec)-vec3(1.0)).xyz;

	vec4 spotColor = texture(spotlightMap, vSpotlightUv.xy / vSpotlightUv.z); // CHECK

	float specular = clamp(dot(vHalfVec, bumpVec.xyz), 0.0, 1.0);
	specular = pow(specular, 16.0) * vLightColor.w * clamp(bumpVec.w, 0.0, 1.0) * clamp(spotColor.w, 0.0, 1.0);

	outColor.xyz = diffuse * dot(lightVec, bumpVec.xyz) * vLightColor.xyz * spotColor.xyz +
					specular;
}
