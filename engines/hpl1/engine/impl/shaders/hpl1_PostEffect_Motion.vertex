// Copyright 2006-2010 (C) - Frictional Games
//
// This file is part of HPL1 Engine
//
// For conditions of distribution and use, see copyright notice in LICENSE-shaders
//

///////////////////////////////////////////////////////
/// SIMPLE DIFFUSE COLOR VERTEX PROGRAM ////////////
///////////////////////////////////////////////////////

vec4 position = gl_Vertex;
vec3 normal = gl_Normal;
vec3 color = gl_Color.xyz;


out vec3 vColor;
//out float oVelocity	:TEX0
out vec4 vVtxPos;
out vec4 vPrevVtxPos;

uniform mat4 modelView;
uniform mat4 prevModelView;
uniform mat4 worldViewProj;
uniform mat4 prevWorldViewProj;
uniform float blurScale;

void main()
{
	//Get the positions in eye space
	vec4 pos = (modelView * position);
	vec4 prevPos = (prevModelView * position);

	//Transform normal to eye space
	vec3 eyeNormal = mat3(modelView) * normal;

	// calculate eye space motion vector
	vec3 motionVector = pos.xyz - prevPos.xyz;

	//Get the positions in window space.
	pos = (worldViewProj * position);
	prevPos = (prevWorldViewProj * position);

	//Interpolate the previous according to blurscale
	prevPos = mix(pos, prevPos, blurScale);

	//Choose previous or current position based on dot product between motion vector and normal
	//float flag = dot(motionVector, eyeNormal) > 0;
	//vec4 Pstretch = flag ? pos : prevPos;
	//vPos = Pstretch;
	gl_Position = pos;

	//Divide by W -> NDC coordinates
	//pos.xyz = pos.xyz / pos.w;
	//prevPos.xyz = prevPos.xyz / prevPos.w;
	//Calculate window space velocity
	//vec3 windowVel = (prevPos.xyz - pos.xyz);// * vec3(400,300,1);
	//oVelocity = windowVel * blurScale;

	vVtxPos = pos;
	vPrevVtxPos = prevPos;

	//vColor.xy = 0.5 + (windowVel.xy * 0.005);
	//vColor.z = 1;
	//vColor = (1 + eyeNormal)*0.5;
	vColor = vec3(0.5);
}