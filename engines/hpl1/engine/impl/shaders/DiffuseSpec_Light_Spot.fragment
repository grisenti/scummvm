// Copyright 2006-2010 (C) - Frictional Games
//
// This file is part of HPL1 Engine
//
// For conditions of distribution and use, see copyright notice in LICENSE-shaders
//

///////////////////////////////////////////////////////
/// DIFFUSE SPECULAR SPOTLIGHTING FRAGMENT PROGRAM /////////////
///////////////////////////////////////////////////////

in vec4 vLightColor;
in vec2 vUv;
in vec3 vLightDir;
in vec3 vHalfVec;
in vec3 vSpotlightUv;

OUTPUT

uniform sampler2D tex0; //diffuseMap
uniform samplerCube tex1; //normalCubeMap
uniform sampler1D tex2; //falloffMap
uniform sampler2D tex3; //spotlightMap
uniform sampler1D tex4; //spotNegRejectMap

void main()
{
	vec3 diffuse = texture(tex0, vUv).xyz;

	vec3 lightNormal = normalize(vLightDir);//(2*textureCube(tex1,vLightDir)-1).xyz;
	vHalfVec = normalize(vHalfVec);//(2*textureCube(tex1,vHalfVec)-1).xyz;

	float attenuation = texture1D(tex2,dot(vLightDir,vLightDir)).x;
	vec4 spotColor = texture(tex3, vSpotlightUv.xy / vSpotlightUv.z);
	float rejectNeg = texture1D(tex4,vSpotlightUv.z + 0.5).x;

	float specular = clamp(dot(vHalfVec, vec3(0,0,1)), 0.0, 1.0);
	specular = pow(specular, 16.0) * vLightColor.w * spotColor.w;

	outColor.xyz = specular +	diffuse * dot(lightNormal, vec3(0,0,1)) * vLightColor.xyz * spotColor.xyz;
	outColor.xyz *= attenuation * rejectNeg;
}
